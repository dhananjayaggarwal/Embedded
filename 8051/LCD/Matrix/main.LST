C51 COMPILER V8.16   MAIN                                                                  06/08/2017 11:03:05 PAGE 1   


C51 COMPILER V8.16, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE main.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include <REGX51.H>
   2          
   3          sbit rs = P2^4;
   4          sbit en = P2^5;
   5          #define lcdport P0
   6          sbit R1=P1^0;
   7          sbit R2=P1^1;
   8          sbit R3=P1^2;
   9          sbit R4=P1^3;
  10          sbit C1=P1^5;
  11          sbit C2=P1^6;
  12          sbit C3=P1^7;
  13          
  14          char keycheck();        //It returns a character which is send to lcd data
  15          
  16          unsigned char keyno, key, flag;  //because character need to be shown
  17          void lcd_init();
  18          void lcd_data(unsigned char dat);
  19          void lcd_command(unsigned char comd);
  20          void delay(int);
  21          void lcd_string(unsigned char *s);
  22          void keyaction(char key);
  23          
  24          void main()
  25          {
  26   1      
  27   1      lcd_init();
  28   1      
  29   1      
  30   1      while(1){
  31   2      
  32   2              key=keycheck();                  //Call to return which key was pressed
  33   2              keyaction(key);  //Send keypressed to data
  34   2      }
  35   1      }
  36          
  37          
  38          void lcd_init()                 //To initialize working of lcd
  39          {
  40   1      lcd_command(0x02);                // Cursor at home
  41   1      delay(15000);
  42   1      
  43   1      lcd_command(0x28);               //Function Set to 4 bit data bus
  44   1      delay(40);
  45   1      
  46   1      lcd_command(0x06);                //Entry Mode set increament/no shift
  47   1      delay(40);
  48   1      
  49   1      lcd_command(0x0f);                //Display on,cursor displayed,blinks
  50   1      delay(40);
  51   1      
  52   1      lcd_command(0x01);                //Clears all display and returns cursor to home(address 0)
  53   1      delay(16500);
  54   1      }
  55          
C51 COMPILER V8.16   MAIN                                                                  06/08/2017 11:03:05 PAGE 2   

  56          
  57          void lcd_command(unsigned char comd)      //To send commands using 4 bit bus
  58          {
  59   1      rs=0;                                                                     //register select is low which implies command
  60   1      
  61   1      lcdport=(comd&0xf0);                                       //Most Significant 4 bits are send to microcontroller first
  62   1      en=1;                                                                      //when enable drops from high to low, bit is transferred to controller
  63   1      delay(1000);
  64   1      en=0;
  65   1                                                                                              //Nest LSB's are transferred
  66   1      lcdport=(comd<<4);
  67   1      en=1;
  68   1      delay(1000);
  69   1      en=0;
  70   1      
  71   1      }
  72          
  73          void lcd_data(unsigned char dat)                //To send data to lcd
  74          {
  75   1      rs=1;                                                                   //rs high implies read or write, we perform only write as we keep R/W pin grounded
  76   1      
  77   1      lcdport=(dat&0xf0);
  78   1      en=1;
  79   1      delay(1000);
  80   1      en=0;
  81   1      
  82   1      lcdport=(dat<<4);
  83   1      en=1;
  84   1      delay(1000);
  85   1      en=0;
  86   1      
  87   1      }
  88          
  89          
  90                                                                                     
  91          void delay(int t)                                          //To delay
  92          {
  93   1              int i;
  94   1              for(i=0;i<t;i++);
  95   1      }
  96          
  97          char keycheck()
  98          {
  99   1        C1=1;
 100   1        C2=1;
 101   1        C3=1;
 102   1         keyno='n';
 103   1        C1=0;
 104   1         if(R1==0)
 105   1        {
 106   2          keyno='3';
 107   2        }
 108   1         if(R2==0)
 109   1        {
 110   2          keyno='6';
 111   2        }
 112   1              if(R3==0)
 113   1              {
 114   2                      keyno='9';
 115   2              }
 116   1         if(R4==0)
 117   1         {
C51 COMPILER V8.16   MAIN                                                                  06/08/2017 11:03:05 PAGE 3   

 118   2              keyno='#';
 119   2         }
 120   1      
 121   1        C1=1;
 122   1        C2=0;
 123   1          if(R1==0)
 124   1        {
 125   2          keyno='2';
 126   2        }
 127   1        if(R2==0)
 128   1        {
 129   2          keyno='5';
 130   2         }
 131   1      
 132   1              if(R3==0)
 133   1              {
 134   2                      keyno='8';
 135   2              }
 136   1         if(R4==0)
 137   1         {
 138   2              keyno='0';
 139   2         }
 140   1        C2=1;
 141   1        C3=0;
 142   1        if(R1==0)
 143   1        {
 144   2          keyno='1';
 145   2        }
 146   1        if(R2==0)
 147   1        {
 148   2          keyno='4';
 149   2              } 
 150   1        if(R3==0)
 151   1        {
 152   2         keyno='7';
 153   2        } 
 154   1              
 155   1         if(R4==0)
 156   1         {
 157   2              keyno='*';
 158   2         }
 159   1        C3=1;
 160   1      
 161   1        return keyno;
 162   1      }
 163          
 164          void keyaction(char key)
 165          {
 166   1        if(keyno=='n')
 167   1        flag=1;
 168   1      
 169   1              else if(flag==1)
 170   1              {
 171   2                      flag=0;
 172   2      
 173   2                      lcd_command(0x01);
 174   2                      lcd_data(key);   //Send keypressed to data
 175   2      
 176   2      
 177   2               }
 178   1      }
 179          
C51 COMPILER V8.16   MAIN                                                                  06/08/2017 11:03:05 PAGE 4   

 180          
 181          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    272    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      3       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
